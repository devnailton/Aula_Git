SSH

No servidor que irá receber a conexão do Github roda os seguintes comandos:

ssh-keygen -t ed25519 -C "devnailton@gmail.com"
eval "$(ssh-agent -s)"
ssh-add /root/.ssh/id_ed25519
cat /root/.ssh/id_ed25519.pub
Copia essa chave ssh para usar na configuração do Git

Verificar se o ssh do git está ok no servidor
ssh -T git@github.com


Clica na foto > Settings > SSH and GPG Keys > Generate SSH Keys >

Cheking for existing SSH Keys > Siga os passos na página para verificar se existe uma chave ssh em seu computador

Para gerar vai em: Generate a new SSH Key and adding it to the ssh-agent > Siga os passos na página, depois volta para adicionar essa chave no Github

Clica na foto > Settings > SSH and GPG Keys > add a new SSH Key > Siga os passos na página (vai pedir pra rodar um código no terminal do seu PC, esse código vai copiar a chave SSH - Área de transferência do SO) >

Clica na foto > Settings > SSH and GPG Keys > Botão New SSH Key > Dá um nome pra ela e cola o a chave que foi copiada antes

****************************************************************
git init
INICIA O REPOSITÓRIO GIT NA PASTA ATUAL
****************************************************************
rm -rf .git
REMOVE O REPOSITÓRIO GIT DA PASTA ATUAL
****************************************************************
git status
QUAIS ARQUIVOS FORMA OU NÃO INCLUÍDOS NO CONTROLE DE VERSÃO
****************************************************************
git add "meu codigo.txt" 
ADICIONA O ARQUIVO AO CONTROLE DE VERSÃO
****************************************************************
git add .
ADICIONA TODOS OS ARQUIVOS AO CONTROLE DE VERSÃO
****************************************************************
git commit -m "Commit Inicial"
CRIA A PRIMEIRA VERSÃO DO CÓDIGO
****************************************************************
CONFIGURA O GITHUB PARA O PRIMEIRO ACESSO

git config --global user.email "nltsilva8@gmail.com"
ENTER
git config --global user.name "NailtonSSantos"
****************************************************************
git push

CONFIGURAR PRIMEIRO PUSH
git remote add origin https://github.com/NailtonSSantos/Aula_Git.git

git push --set-upstream origin main
****************************************************************
git remote remove origin
REMOVE O LINK COM A PASTA NO GIT
****************************************************************
git reflog --all
MOSTRA AS VERSÕES DO CÓDIGO
****************************************************************
git reset --hard 165hh85
VOLTA A VERSÃO ANTERIOR, DESCRITA PELO ID 165hh85
****************************************************************
git branch
VER AS BRANCHS
****************************************************************
git branch staging
CRIA A BRANCH staging
****************************************************************
git branch -d <branch>
DELETA A BRANCH
****************************************************************
git checkout staging
MUDA PARA A BRANCH staging
****************************************************************
git Merge

ANTES DE FAZER UM MERGE, DÊ UM GIT PULL

Entra na branch que vai receber as atualizações
git merge staging

NESSE CASO AS ALTERAÇÕES NO CODIGO DA staging FOI COLADO EM CIMA DA BRANCH ATUAL
LOGO EM SEGUIDA ELE MOSTRA AS ALTERAÇÕES QUE FORAM FEITAS

O MAIS CORRETO A SE FAZER É:

1 - git pull na branch principal
2 - gerar uma nova branch a partir da branch principal
3 - trabalhar e adicionar novas funcionalidades na nova branch que criou
4 - Finalizar o trabalho na branch temporária
5 - git checkout na branch principal
6 - git pull
7 - Mergiar(Unir) o código da branch temporária com a branch principal (depois de testar)
8 - git push da branch principal
****************************************************************
git checkout -b sistema-de-login master

CRIA UMA NOVA BRANCH COM O NOME sistema-de-login, A PARTIR DA BRANCH MASTER
****************************************************************
git checkout -b teste

CRIA UMA NOVA BRANCH COM O NOME teste, E já entra na Branch nova
****************************************************************
touch teste.txt

CRIA O ARQUIVO teste.txt
****************************************************************
touch .gitignore

CRIA O ARQUIVO GITIGNORE
Dentro dele ocultei, por exemplo a pasta segredos e a fotos.png, abrir o arquivo e digitei:

segredos/
fotos.png

****************************************************************

Entendendo Mesclagem (Merge) vs Rebase:

Opções de Configuração do Git:

    git config pull.rebase false (merge)
        Esta opção fará um merge das mudanças remotas com as mudanças locais. Isso criará um commit de merge se houverem alterações locais não commitadas que não foram empurradas para o repositório              remoto.
        Uso: Quando você deseja mesclar as mudanças remotas e locais, criando um histórico de commits que mostra a junção das duas linhas de desenvolvimento.

        git config pull.rebase false
        git pull

    git config pull.rebase true (rebase)
        Esta opção rebaseará suas mudanças locais no topo das mudanças remotas. Isso significa que as mudanças locais serão aplicadas após as mudanças remotas, mantendo um histórico linear de commits.
        Uso: Quando você deseja um histórico de commits mais limpo e linear, aplicando suas alterações locais sobre as remotas.

        git config pull.rebase true
        git pull

    git config pull.ff only (fast-forward only)
        Esta opção só permitirá um pull se puder ser feito um fast-forward, ou seja, se a sua branch local puder ser avançada diretamente para a nova posição da branch remota sem criar commits                   adicionais. Se houverem mudanças locais que conflitam, o pull falhará.
        Uso: Quando você deseja garantir que o pull não criará commits de merge ou rebases e que a branch local pode avançar diretamente.
