git init
INICIA O REPOSITÓRIO GIT NA PASTA ATUAL
****************************************************************
rm -rf .git
REMOVE O REPOSITÓRIO GIT DA PASTA ATUAL
****************************************************************
git status
QUAIS ARQUIVOS FORMA OU NÃO INCLUÍDOS NO CONTROLE DE VERSÃO
****************************************************************
git add "meu codigo.txt" 
ADICIONA O ARQUIVO AO CONTROLE DE VERSÃO
****************************************************************
git add .
ADICIONA TODOS OS ARQUIVOS AO CONTROLE DE VERSÃO
****************************************************************
git commit -m "Commit Inicial"
CRIA A PRIMEIRA VERSÃO DO CÓDIGO
****************************************************************
CONFIGURA O GITHUB PARA O PRIMEIRO ACESSO

git config --global user.email "nltsilva8@gmail.com"
ENTER
git config --global user.name "NailtonSSantos"
****************************************************************
git push

CONFIGURAR PRIMEIRO PUSH
git remote add origin https://github.com/NailtonSSantos/Aula_Git.git

git push --set-upstream origin main
****************************************************************
git remote remove origin
REMOVE O LINK COM A PASTA NO GIT
****************************************************************
git reflog --all
MOSTRA AS VERSÕES DO CÓDIGO
****************************************************************
git reset --hard 165hh85
VOLTA A VERSÃO ANTERIOR, DESCRITA PELO ID 165hh85
****************************************************************
git branch
VER AS BRANCHS
****************************************************************
git branch staging
CRIA A BRANCH staging
****************************************************************
git branch -d <branch>
DELETA A BRANCH
****************************************************************
git checkout staging
MUDA PARA A BRANCH staging
****************************************************************
git Merge

ANTES DE FAZER UM MERGE, DÊ UM GIT PULL

Entra na branch que vai receber as atualizações
git merge staging

NESSE CASO AS ALTERAÇÕES NO CODIGO DA staging FOI COLADO EM CIMA DA BRANCH ATUAL
LOGO EM SEGUIDA ELE MOSTRA AS ALTERAÇÕES QUE FORAM FEITAS

O MAIS CORRETO A SE FAZER É:

1 - git pull na branch principal
2 - gerar uma nova branch a partir da branch principal
3 - trabalhar e adicionar novas funcionalidades na nova branch que criou
4 - Finalizar o trabalho na branch temporária
5 - git checkout na branch principal
6 - git pull
7 - Mergiar(Unir) o código da branch temporária com a branch principal (depois de testar)
8 - git push da branch principal
****************************************************************
git checkout -b sistema-de-login master

CRIA UMA NOVA BRANCH COM O NOME sistema-de-login, A PARTIR DA BRANCH MASTER
****************************************************************
touch .gitignore

CRIA O ARQUIVO GITIGNORE
Dentro dele ocultei, por exemplo a pasta segredos e a fotos.png, abrir o arquivo e digitei:

segredos/
fotos.png