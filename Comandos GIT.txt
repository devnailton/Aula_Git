

SSH

Clica na foto > Settings > SSH and GPG Keys > Generate SSH Keys >

Cheking for existing SSH Keys > Siga os passos na página para verificar se existe uma chave ssh em seu computador

Para gerar vai em: Generate a new SSH Key and adding it to the ssh-agent > Siga os passos na página, depois volta para adicionar essa chave no Github

Clica na foto > Settings > SSH and GPG Keys > add a new SSH Key > Siga os passos na página (vai pedir pra rodar um código no terminal do seu PC, esse código vai copiar a chave SSH - Área de transferência do SO) >

Clica na foto > Settings > SSH and GPG Keys > Botão New SSH Key > Dá um nome pra ela e cola o a chave que foi copiada antes

****************************************************************
git init
INICIA O REPOSITÓRIO GIT NA PASTA ATUAL
****************************************************************
rm -rf .git
REMOVE O REPOSITÓRIO GIT DA PASTA ATUAL
****************************************************************
git status
QUAIS ARQUIVOS FORMA OU NÃO INCLUÍDOS NO CONTROLE DE VERSÃO
****************************************************************
git add "meu codigo.txt" 
ADICIONA O ARQUIVO AO CONTROLE DE VERSÃO
****************************************************************
git add .
ADICIONA TODOS OS ARQUIVOS AO CONTROLE DE VERSÃO
****************************************************************
git commit -m "Commit Inicial"
CRIA A PRIMEIRA VERSÃO DO CÓDIGO
****************************************************************
CONFIGURA O GITHUB PARA O PRIMEIRO ACESSO

git config --global user.email "nltsilva8@gmail.com"
ENTER
git config --global user.name "NailtonSSantos"
****************************************************************
git push

CONFIGURAR PRIMEIRO PUSH
git remote add origin https://github.com/NailtonSSantos/Aula_Git.git

git push --set-upstream origin main
****************************************************************
git remote remove origin
REMOVE O LINK COM A PASTA NO GIT
****************************************************************
git reflog --all
MOSTRA AS VERSÕES DO CÓDIGO
****************************************************************
git reset --hard 165hh85
VOLTA A VERSÃO ANTERIOR, DESCRITA PELO ID 165hh85
****************************************************************
git branch
VER AS BRANCHS
****************************************************************
git branch staging
CRIA A BRANCH staging
****************************************************************
git branch -d <branch>
DELETA A BRANCH
****************************************************************
git checkout staging
MUDA PARA A BRANCH staging
****************************************************************
git Merge

ANTES DE FAZER UM MERGE, DÊ UM GIT PULL

Entra na branch que vai receber as atualizações
git merge staging

NESSE CASO AS ALTERAÇÕES NO CODIGO DA staging FOI COLADO EM CIMA DA BRANCH ATUAL
LOGO EM SEGUIDA ELE MOSTRA AS ALTERAÇÕES QUE FORAM FEITAS

O MAIS CORRETO A SE FAZER É:

1 - git pull na branch principal
2 - gerar uma nova branch a partir da branch principal
3 - trabalhar e adicionar novas funcionalidades na nova branch que criou
4 - Finalizar o trabalho na branch temporária
5 - git checkout na branch principal
6 - git pull
7 - Mergiar(Unir) o código da branch temporária com a branch principal (depois de testar)
8 - git push da branch principal
****************************************************************
git checkout -b sistema-de-login master

CRIA UMA NOVA BRANCH COM O NOME sistema-de-login, A PARTIR DA BRANCH MASTER
****************************************************************
git checkout -b teste

CRIA UMA NOVA BRANCH COM O NOME teste, E já entra na Branch nova
****************************************************************
touch teste.txt

CRIA O ARQUIVO teste.txt
****************************************************************
touch .gitignore

CRIA O ARQUIVO GITIGNORE
Dentro dele ocultei, por exemplo a pasta segredos e a fotos.png, abrir o arquivo e digitei:

segredos/
fotos.png

****************************************************************

Entendendo Mesclagem (Merge) vs Rebase:

Mesclagem: Quando você usa git pull com a estratégia de mesclagem (padrão), ele cria um novo commit de mesclagem no histórico da sua branch local que combina as alterações remotas com as alterações locais. Isso cria um histórico de branch mais explícito, mas também pode levar a conflitos de mesclagem se as alterações locais se sobrepõem às alterações remotas.

Rebase: Com o rebase, git pull repete seus commits locais em cima do commit remoto mais recente. Isso reescreve o histórico da sua branch local para parecer que você fez suas alterações locais diretamente em cima da branch remota atualizada. O rebase pode levar a um histórico de branch mais limpo, mas também pode causar problemas se você já compartilhou sua branch local com outras pessoas.

git pull --merge origin master: Isso força uma mesclagem mesmo se pull.rebase estiver definido como true.
git pull --rebase origin master: Isso força um rebase mesmo se pull.rebase estiver definido como false.
